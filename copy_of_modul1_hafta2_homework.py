# -*- coding: utf-8 -*-
"""Copy of modul1_hafta2_Homework.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13ehlJdrgwdZXQei4juPCEhXIHPgzrlt3

# Veri Bilimi Çalışma Soruları


Veri seti: [Titanic](https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv)

## Kolay Sorular

**Soru 1**: `Embarked` sütununda kaç tane eksik veri olduğunu bulun.
"""

import pandas as pd
import numpy as np
# Titanic veri setini yükleme
url = "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"
df = pd.read_csv(url)
print(df['Embarked'].isnull().sum())

"""**Soru 2**: `Cabin` sütunundaki eksik verileri 'Unknown' ile doldurun ve sonucu yeni bir sütun (`Cabin_filled`) olarak kaydedin."""

df['Cabin_filled'] = df['Cabin'].fillna("Unknown")
df['Cabin_filled'].isna().sum()
#df['Cabin'].isna().sum()

"""**Soru 3**: `Age` sütunundaki eksik verileri ortalama yaş ile doldurun."""

mean_age = df['Age'].mean()
df['Age_mean'] = df['Age'].fillna(mean_age)
df[['Age','Age_mean']].head()

"""**Soru 4**: `Pclass` sütununu kategorik veri tipine (`category`) dönüştürün."""

df['Pclass'] = df['Pclass'].astype('category')

df['Pclass'].dtype

"""**Soru 5**: `Sex` sütunundaki benzersiz değerleri listeleyin."""

print(df['Sex'].unique())

"""**Soru 6**: `Sex` sütununu LabelEncoder kullanarak sayısal değerlere dönüştürün (`male=0`, `female=1`)."""

from sklearn.preprocessing import LabelEncoder, MinMaxScaler, StandardScaler
le = LabelEncoder()
df['Sex_encoded'] = le.fit_transform(df['Sex'])
print(df[['Sex','Sex_encoded']].head())

"""**Soru 7**: `Name` sütunundaki değerleri küçük harfe çevirin ve yeni bir sütun (`Name_lower`) oluşturun."""

df['Name_lower'] = df['Name'].str.lower()
print(df[['Name','Name_lower']].head())

"""**Soru 8**: `Fare` sütununu MinMaxScaler ile [0,1] aralığına normalleştirin."""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df['Fare_scaled'] = scaler.fit_transform(df[['Fare']])
print(df[['Fare','Fare_scaled']])

"""**Soru 9**: `Ticket` sütununda yalnızca rakamlardan oluşan değerleri bulun (`str.isdigit`)."""

only_digits = df[df['Ticket'].str.isdigit()]
print(only_digits)

"""**Soru 10**: `Age` sütununu StandardScaler ile standardize edin (ortalama 0, standart sapma 1)."""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df['Age_scaled'] = scaler.fit_transform(df[['Age']])

print(df[['Age','Age_scaled']])

"""## Orta Düzey Sorular

**Soru 11**: `Age` sütunundaki eksik verileri, `Pclass` gruplarına göre medyan ile doldurun.
"""

# pclass gruplarına göre Age medyanlarını hesapla
median_ages = df.groupby('Pclass')['Age'].median()
print(median_ages)

# 1. sınıftaki yolcuların medyanı 37
# 2. sınıf 29
# 3. sınıf 24

# Eksik yaşları, Pclass'a göre uygun medyan ile doldur
df['Age_filled'] = df.apply( lambda row: median_ages[row['Pclass']] if pd.isna(row['Age']) else row['Age'], axis=1)
print(df[['Age','Age_filled']])
print("\n boş satır sayısı: ",df['Age_filled'].isna().sum())

"""**Soru 12**: `Fare` sütununda IQR yöntemiyle aykırı değerleri tespit edin ve aykırı olan satırların indekslerini listeleyin."""

import matplotlib.pyplot as plt
import seaborn as sns
#  Q1 ve Q3
Q1 = df['Fare'].quantile(0.25)
Q3 = df['Fare'].quantile(0.75)

#  IQR
IQR = Q3 - Q1

# alt üst sınırlar
lower_bound = Q1 - 1.5 *IQR
upper_bound = Q3 + 1.5 *IQR

# Aykırı değerlerin bulunduğu satırların indeksleri
outlier_indices = df[(df['Fare'] < lower_bound) | (df['Fare'] > upper_bound)].index

print("Ayrık değerlerin indeksleri: \n",outlier_indices.tolist() )

plt.figure(figsize=(8,6))
sns.boxplot(x=df['Fare'], color='lightblue')
plt.title('Fare Boxplot')
plt.grid(True)
plt.show()

"""**Soru 13**: `Embarked` sütununu one-hot encoding ile kodlayın ve dummy tuzağını önlemek için bir sütunu silin."""

embarked_dummies = pd.get_dummies(df['Embarked'], prefix='Embarked', drop_first=True)
df = pd.concat([df, embarked_dummies], axis=1)

"""**Soru 14**: `Name` sütununda 'Miss.' içeren satırları filtreleyin ve yeni bir sütun (`Is_Miss`) oluşturun (1: Miss, 0: Değil)."""

df['Is_Miss'] = df['Name'].str.contains('Miss.').astype(int)
print(df[['Name','Is_Miss']])

"""**Soru 15**: `Ticket` sütunundaki değerlerin başındaki ve sonundaki boşlukları kaldırın (`str.strip`)."""

df['Ticket'] = df['Ticket'].str.strip()
print(df[['Ticket']])

"""**Soru 16**: `Age` sütununda Z-Score yöntemiyle (|Z| > 3) aykırı değerleri tespit edin."""

# Ortalama ve standart sapma
mean_age = df['Age'].mean()
std_age = df['Age'].std()

# Z-skoru
z_scores = (df['Age'] - mean_age) / std_age

# |Z| > 3 olanları filtrele
outliers = df[abs(z_scores) > 3]

print("Z-Score yöntemiyle tespit edilen aykırı değerlerin indeksleri:")
print(outliers.index.tolist())

"""**Soru 17**: `Sex` ve `Embarked` sütunlarını birleştirerek yeni bir özellik oluşturun (ör. `male_S`, `female_Q`) ve `zip` fonksiyonunu kullanın."""

df['Sex_Embarked'] = [f"{s}_{e}" for s, e in zip(df['Sex'], df['Embarked'])]
print(df[['Sex','Embarked','Sex_Embarked']])

"""**Soru 18**: `Embarked` sütunundaki eksik verileri mod ile doldurun."""

# mod değeri
embarked_mode = df['Embarked'].mode()[0]

# Eksik değerleri mod ile doldurma
df['Embarked']=df['Embarked'].fillna(embarked_mode)

print(df[['Embarked']])
print("\n boş satır sayısı: ",df['Embarked'].isna().sum())

"""**Soru 19**: `Name` sütununda virgül (`,`) karakterini nokta (`.`) ile değiştirin (`str.replace`)."""

df['Name'] = df['Name'].str.replace(',', '.', regex=False)
print(df[['Name']])

"""**Soru 20**: `Fare` sütununda negatif veya sıfır değerleri kontrol edin ve bunları medyan ile değiştirin."""

# Fare sütununun medyanını
fare_median = df['Fare'].median()

# Negatif veya sıfır olanları medyan ile değiştir
df.loc[df['Fare'] <= 0, 'Fare'] = fare_median

print(df[['Fare']])

"""## İleri Düzey Sorular

**Soru 21**: `Age` sütunundaki eksik verileri, `Pclass` ve `Sex` kombinasyonlarına göre medyan ile doldurun.
"""

median_ages = df.groupby(['Pclass', 'Sex'])['Age'].median()
print(median_ages)

# eksik yaşları bu medyanlar ile doldur
def fill_age(row):
    if pd.isna(row['Age']):
        return median_ages.loc[(row['Pclass'], row['Sex'])]
    else:
        return row['Age']

df['Age_filled'] = df.apply(fill_age, axis=1)

print(df['Age_filled'].isna().sum())

"""**Soru 22**: `Fare` sütunundaki aykırı değerleri IQR yöntemiyle tespit edin ve bunları Q1 - 1.5*IQR ve Q3 + 1.5*IQR sınırlarıyla sınırlandırın (`clip`)."""

Q1 = df['Fare'].quantile(0.25)
Q3 = df['Fare'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df['Fare_clipped'] = df['Fare'].clip(lower=lower_bound, upper=upper_bound)
print(df)

"""**Soru 23**: `Embarked` sütununu hedef (`Survived`) bazlı kodlayın (target encoding) ve yeni bir sütun (`Embarked_target`) oluşturun."""

#Embarked kategorilerine göre Survived ortalamaları
target_means = df.groupby('Embarked')['Survived'].mean()

#Embarked sütunundaki her değeri karşılık gelen ortalama ile değiştir
df['Embarked_target'] = df['Embarked'].map(target_means)
print(df[['Embarked','Embarked_target']])

"""**Soru 24**: `Name` sütunundan unvanları (ör. Mr., Mrs., Miss.) çıkarın ve yeni bir sütun (`Title`) oluşturun (`str.extract` ile regex kullanın). Yeni oluşturulan Title sütunu yolcunun sadece unvanını içermeli."""

df['Title'] = df['Name'].str.extract(r'\.\s*([A-Za-z]+\.)')

print(df[['Name','Title']])

"""**Soru 25**: `Age` sütununu üç gruba ayırın (çocuk: <18, yetişkin: 18-60, yaşlı: >60) ve `lambda` fonksiyonu kullanarak yeni bir sütun (`Age_Group`) oluşturun. Kodlama ile yapılabileceği gibi `cut`, `qcut` fonksiyonlarının araştırılması ve bu fonskyionlardan uygun olanın kullanılması istenmektedir."""

df['Age_Group'] = df['Age'].apply(lambda x: 'Çocuk' if x < 18 else ('Yaşlı' if x > 60 else 'Yetişkin'))

bins = [0, 18, 60, float('inf')]
labels = ['Çocuk', 'Yetişkin', 'Yaşlı']

df['Age_Group'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)

df['Age_Group'] = pd.qcut(df['Age'], q=3, labels=['Çocuk', 'Yetişkin', 'Yaşlı'])

print(df[['Age','Age_Group']])

"""**Soru 26**: `Ticket` sütununda yalnızca rakamlardan oluşan değerleri sayısala çevirin ve yeni bir sütun (`Ticket_numeric`) oluşturun (`to_numeric`, `errors='coerce'`)."""

import pandas as pd

# Ticket değerlerinin rakam olup olmadığını kontrol et
df['Ticket_numeric'] = pd.to_numeric(df['Ticket'].where(df['Ticket'].str.isdigit()), errors='coerce')
print(df[['Ticket','Ticket_numeric']])

"""**Soru 27**: `Fare` sütununda aykırı değerleri Z-Score yöntemiyle (|Z| > 3) tespit edin ve bunları medyan ile değiştirin."""

mean_fare = df['Fare'].mean()
std_fare = df['Fare'].std()

z_scores = (df['Fare'] - mean_fare) / std_fare

outliers = df[abs(z_scores) > 3].index

fare_median = df['Fare'].median()
df.loc[outliers, 'Fare'] = fare_median
print(df[['Fare']])

"""**Soru 28**: `Cabin` sütununda yalnızca ilk harfi alın (ör. 'C23' → 'C') ve yeni bir sütun (`Cabin_letter`) oluşturun (`str[0]`)."""

df['Cabin_letter'] = df['Cabin'].str[0]
print(df[['Cabin','Cabin_letter']])

"""**Soru 29**: `Embarked` sütununu frekans bazlı kodlayın (her kategorinin frekansını kullanın) ve yeni bir sütun (`Embarked_freq`) oluşturun."""

# Kategorilerin frekansları
freq_encoding = df['Embarked'].value_counts()

# Her kategoriye frekansını eşle
df['Embarked_freq'] = df['Embarked'].map(freq_encoding)
print(df[['Embarked','Embarked_freq']])

"""**Soru 30**: `Age` ve `Fare` sütunlarını kullanarak `map` fonksiyonu ile bir yaş-fiyat oranı (`Age_Fare_Ratio`) oluşturun (ör. `Age / Fare`)."""

# Kodunuzu buraya yazın

df['Age_Fare_Ratio'] = df.apply(lambda row: row['Age'] / row['Fare'] if row['Fare'] != 0 else None, axis=1)
print(df[['Age','Fare','Age_Fare_Ratio']])

"""## Araştırma Soruları

Aşağıdaki sorular, belirtilen konularda bahsedilmeyen ancak önemli olan yöntem ve fonksiyonları keşfetmek için tasarlanmıştır.

**Araştırma Soru 1**: `sklearn.impute.IterativeImputer` fonksiyonunu araştırın ve `Age` sütunundaki eksik verileri doldurmak için nasıl kullanılabileceğini açıklayın.

sklearn.impute.IterativeImputer fonksiyonu, eksik verileri doldurma konusunda gelişmiş bir yöntemdir. Bu fonksiyon, her eksik değere sahip özelliği diğer özelliklerden bir fonksiyon olarak round-robin (döngüsel) şekilde modelleyerek eksik değerleri tahmin eden çok değişkenli bir imputerdır. IterativeImputer'ın Çalışma Prensibi Varsayılan olarak, diğer tüm giriş özelliklerinin bir fonksiyonunu kullanan BayesianRidge modeli kullanılır Iterative Imputation for Missing Values in Machine Learning - MachineLearningMastery.com. Bu iteratif süreç şöyle çalışır:

İlk doldurma: Eksik değerler önce basit bir stratejiyle (ortalama, medyan vb.) doldurulur Iteratif tahmin: Her özellik için eksik değerler, diğer özellikler kullanılarak tahmin edilir Döngüsel güncelleme: Bu prosedür iteratiftir, çünkü ilk sütunu doldurduktan sonra, ikinci sütun için model eğitiminde doldurduğumuz değerleri kullanırız
"""

# Kodunuzu buraya yazın

#Age sütunundaki eksik verileri doldurmak için nasıl kullanılır?
from sklearn.experimental import enable_iterative_imputer  # Gerekli, deneysel modülü aktif eder
from sklearn.impute import IterativeImputer
import pandas as pd

# Örnek olarak sayısal ve label encoded sütunlar seçelim
features = ['Age', 'Pclass', 'Fare', 'Sex_encoded']

# Bu sütunların olduğu bir alt DataFrame hazırlıyoruz
data_for_impute = df[features]

# IterativeImputer nesnesi oluştur
imputer = IterativeImputer(random_state=0)

# İmpute et (eksik veriler doldurulur)
data_imputed = imputer.fit_transform(data_for_impute)

# Sonucu DataFrame olarak kaydet
df['Age_imputed'] = data_imputed[:, 0]  # Age sütunu ilk sütun

"""**Araştırma Soru 2**: `sklearn.preprocessing.RobustScaler` fonksiyonunu araştırın ve `Fare` sütununu ölçeklendirmek için nasıl kullanılabileceğini açıklayın.

sklearn.preprocessing.RobustScaler, veriyi ölçeklendirmek için kullanılan bir yöntemdir ve özellikle aykırı değerlere (outlier) karşı dayanıklıdır. Yani, veri setinde aşırı uç değerler varsa RobustScaler bunların etkisini azaltarak ölçeklendirme yapar.
"""

# Kodunuzu buraya yazın
from sklearn.preprocessing import RobustScaler

scaler = RobustScaler()

# Fare sütununu 2D diziye çevir (fit_transform için)
fare_values = df[['Fare']].values

# Ölçeklendirme yap
fare_scaled = scaler.fit_transform(fare_values)

# Sonucu yeni bir sütuna ata
df['Fare_scaled'] = fare_scaled

print(df[['Fare','Fare_scaled']])

"""**Araştırma Soru 3**: `pandas.cut` fonksiyonunu araştırın ve `Age` sütununu eşit aralıklı yaş gruplarına ayırmak için nasıl kullanılabileceğini açıklayın.

pandas.cut fonksiyonu, sayısal verileri belirlenen aralıklara bölerek kategorik verilere dönüştürmek için kullanılır.

**pandas.cut nedir?**
Sayısal verileri belli aralıklara (binlere) böler.

Her aralık bir kategori (etiket) olur.

İstersen aralıkların etiketlerini kendin belirleyebilirsin.
"""

# Kodunuzu buraya yazın
import pandas as pd

bins = [0, 20, 40, 80]  # Yaş aralıkları
labels = ['Genç', 'Orta Yaş', 'Yaşlı']  # Aralıklara verilen isimler

df['Age_Group'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)

print(df[['Age','Age_Group']])

"""**Araştırma Soru 4**: `sklearn.preprocessing.OrdinalEncoder` fonksiyonunu araştırın ve `Embarked` sütununu sıralı bir şekilde kodlamak için nasıl kullanılabileceğini açıklayın.

sklearn.preprocessing.OrdinalEncoder, kategorik verileri sayısal olarak sıralı (ordinal) şekilde kodlamak için kullanılır. Yani, her kategoriye 0'dan başlayarak artan tamsayı değerleri atar.

**OrdinalEncoder nedir?**

Kategorik değişkenleri sayısal değerlere dönüştürür.

Sıralı bir kodlama yapar, yani her kategoriye farklı bir tam sayı verir.

Özellikle kategoriler arasında belirli bir sıra (rank) varsa faydalıdır.

Çok kategorili sütunları da aynı anda dönüştürebilir.
"""

# Kodunuzu buraya yazın
from sklearn.preprocessing import OrdinalEncoder
X = df[['Embarked']]
encoder = OrdinalEncoder()
df['Embarked_ordinal'] = encoder.fit_transform(X)
print(df[['Embarked','Embarked_ordinal']])

"""**Araştırma Soru 5**: `numpy.log1p` fonksiyonunu araştırın ve `Fare` sütunundaki çarpıklığı azaltmak için nasıl kullanılabileceğini açıklayın.

numpy.log1p fonksiyonu, bir sayı dizisine logaritma dönüşümü uygulamak için kullanılır; özellikle log(1 + x) hesaplar. Böylece sıfır veya sıfıra yakın değerlerdeki sorunlar önlenir.

**numpy.log1p nedir?**

log1p(x) fonksiyonu matematikte log(1 + x) demektir.

x=0 için log1p(0)=0 olduğu için, sıfır veya negatif olmayan küçük değerlerde sayısal kararlılık sağlar.

Veri biliminde, pozitif dağılımı sağa çarpık (skewed) olan verilere uygulanır.

Çarpıklığı azaltarak dağılımı daha simetrik hale getirir.
"""

# Kodunuzu buraya yazın
df['Fare_log'] = np.log1p(df['Fare'])
print(df[['Fare','Fare_log']])


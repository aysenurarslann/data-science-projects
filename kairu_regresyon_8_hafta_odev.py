# -*- coding: utf-8 -*-
"""kairu_regresyon-8-hafta-odev.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14W9CPfY4-T1zucl1Vii7Xq2BgL-se9M1
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("adityadeshpande23/admissionpredictioncsv")

print("Path to dataset files:", path)

"""**1. Veri Setini Anlama ve Ön İşleme**

Adım 1: Veri setini yükleyin ve ilk birkaç satırını görüntüleyin.
"""

import pandas as pd

# Veri setini yükleyelim
df = pd.read_csv("Admission_Predict.csv")

# İlk birkaç satırı görüntüleyelim
print(df.head())

"""Adım 2: Eksik değer olup olmadığını kontrol edin."""

print(df.isnull().sum())

"""Adım 3: Hedef değişkeni ikili sınıfa dönüştürün."""

# Chance of Admit >= 0.75 olanları 1, diğerlerini 0 yapalım
df["Chance of Admit Binary"] = (df["Chance of Admit "] >= 0.75).astype(int)

# Kontrol edelim
print(df[["Chance of Admit ", "Chance of Admit Binary"]].head())

"""Adım 4: Bağımsız değişkenleri belirleyin."""

# Gerekli sütunları seçelim
features = ["GRE Score", "TOEFL Score", "University Rating", "SOP", "LOR ", "CGPA", "Research"]
X = df[features]
y = df["Chance of Admit Binary"]

"""**2. Veriyi Eğitim ve Test Setlerine Bölme**

Adım 5: %80 eğitim, %20 test olarak bölme
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

""" Adım 6: Veriyi ölçeklendirme"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""**3. Lojistik Regresyon Modelini Eğitme**

Adım 7-9: Modeli oluşturma, eğitme ve tahmin
"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)
y_pred_proba = model.predict_proba(X_test_scaled)[:, 1]

""" **4. Modeli Değerlendirme ve Analiz**"""

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test, y_pred)
print(f"Doğruluk: {accuracy:.4f}")

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(cm)

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt

plt.hist(y_pred_proba[y_test == 1], bins=20, alpha=0.5, label="Kabul Edilenler")
plt.hist(y_pred_proba[y_test == 0], bins=20, alpha=0.5, label="Reddedilenler")
plt.xlabel("Kabul Olasılığı")
plt.ylabel("Frekans")
plt.legend()
plt.title("Tahmin Edilen Kabul Olasılıkları")
plt.show()

"""**5. Modelin Öğrenme Sürecini Takip Etme**"""

print("Ağırlıklar (W):", model.coef_)
print("Bias (b):", model.intercept_)

# LogisticRegression'da tol parametresi varsayılan olarak 1e-4'tür.
# Model bu değere ulaşana kadar iterasyon yapar.
print(f"Modelin max_iter: {model.max_iter}")
print(f"Modelin tol (erken durma kriteri): {model.tol}")

"""**En önemli değişkenler**"""

import numpy as np

feature_importance = pd.DataFrame({
    'feature': features,
    'importance': np.abs(model.coef_[0])
}).sort_values(by='importance', ascending=False)

print(feature_importance)
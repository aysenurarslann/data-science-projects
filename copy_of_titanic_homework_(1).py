# -*- coding: utf-8 -*-
"""Copy_of_titanic_homework (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vfVHF_pILqfjLm8afZgdihCqtjfJ3ZLU

# 🚢 Titanic Veri Seti Analizi Ödevi

Bu ödevde Titanic veri seti üzerinde pandas kütüphanesi kullanarak veri analizi yapacaksınız. Sorular kolay seviyeden başlayarak zorlaşmaktadır.

## 📋 Ödev Kuralları:
- Her soruyu ayrı bir hücrede çözün
- Kodlarınızı açıklayıcı yorumlarla destekleyin
- Sonuçları yorumlayın
- Grafik çizilebilecek yerlerde görselleştirme yapın

## 📊 Veri Seti Hakkında:
Titanic veri seti, 1912'de batan Titanic gemisindeki yolcular hakkında bilgi içerir.

**Sütun Açıklamaları:**
- `survived`: Hayatta kalma durumu (0 = Hayır, 1 = Evet)
- `pclass`: Yolcu sınıfı (1 = 1. sınıf, 2 = 2. sınıf, 3 = 3. sınıf)
- `sex`: Cinsiyet
- `age`: Yaş
- `sibsp`: Gemide bulunan kardeş/eş sayısı
- `parch`: Gemide bulunan ebeveyn/çocuk sayısı
- `ticket`: Bilet numarası
- `fare`: Bilet ücreti
- `cabin`: Kabin numarası
- `embarked`: Bindiği liman (C = Cherbourg, Q = Queenstown, S = Southampton)

---
# ✅ TEMEL SEVİYE SORULAR (KOLAY)
---

### Soru 1: Veri setinde kaç satır ve kaç sütun olduğunu bulun.
"""

# Kodunuzu buraya yazın
# Pandas kütüphanesini içe aktar
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Titanic veri setini GitHub'dan oku ve DataFrame'e yükle
df = pd.read_csv("https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv")

# Veri setinin boyutunu göster (satır sayısı, sütun sayısı)
df.shape
# Grafik ayarları
plt.style.use('seaborn-v0_8')
plt.rcParams['figure.figsize'] = (10, 6)

"""### Soru 2: Tüm sütun isimlerini yazdırın."""

# Kodunuzu buraya yazın
df.columns

"""### Soru 3: Yaş ortalamasını ve medyanını hesaplayın."""

# Kodunuzu buraya yazın
# Yaş sütununun ortalamasını hesapla
yas_ortalama = df['Age'].dropna().mean()

# Yaş sütununun medyanını hesapla
yas_medyan = df['Age'].dropna().median()   # dropna()
print(f"Yaş ortalaması: {yas_ortalama:.2f}")
print(f"Yaş medyanı: {yas_medyan:.2f}")

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.hist(df['Age'].dropna(), bins=30, alpha=0.7, color='skyblue')
plt.axvline(yas_ortalama, color='red', linestyle='--', label=f'Ortalama: {yas_ortalama:.1f}')
plt.axvline(yas_medyan, color='green', linestyle='--', label=f'Medyan: {yas_medyan:.1f}')
plt.xlabel('Yaş')
plt.ylabel('Frekans')
plt.title('Yaş Dağılımı')
plt.legend()

plt.subplot(1, 2, 2)
plt.boxplot(df['Age'].dropna())
plt.ylabel('Yaş')
plt.title('Yaş Box Plot')
plt.tight_layout()
plt.show()

"""### Soru 4: Cinsiyet değişkenindeki eşsiz değerleri yazdırın."""

# Kodunuzu buraya yazın

print("Cinsiyet değişkenindeki eşsiz değerler:", df['Sex'].unique())

"""### Soru 5: `pclass` değişkenindeki değerlerin yüzdesel dağılımını yazdırın."""

# Kodunuzu buraya yazın
print(df['Pclass'].value_counts(normalize=True) * 100) # value_counts() - Her değerin kaç kere geçtiğini sayar

"""### Soru 6: Yaşı 30'dan büyük kadın yolcuları listeleyin."""

# Kodunuzu buraya yazın
# Filtreleme
kadin_30_ustu = df[(df['Age'] > 30) & (df['Sex'] == 'female')]


print(kadin_30_ustu[['Name', 'Age', 'Sex', 'Pclass']])

"""### Soru 7: Yaşı 18'den küçük olup 1. sınıfta yolculuk eden yolcuları listeleyin."""

# Kodunuzu buraya yazın
genc_birinci_sinif = df[(df['Age'] < 18) & (df['Pclass'] == 1)]

print(genc_birinci_sinif[['Name', 'Age', 'Sex', 'Pclass', 'Survived']])

"""### Soru 8: İlk 10 gözlemden son 3'ünü gösterin."""

# Kodunuzu buraya yazın
# İlk 10'dan son 3'ü
print(df.head(10).tail(3))

"""### Soru 9: Bilet fiyatı (fare) 100'den büyük olan kaç kişi vardır?"""

# Kodunuzu buraya yazın
# Bilet fiyatı 100'den büyük olanların sayısı
print(len(df[df['Fare'] > 100]))

"""### Soru 10: `sex`, `age` ve `fare` sütunlarından oluşan yeni bir DataFrame oluşturun."""

# Kodunuzu buraya yazın
yeni_df = df[['Sex', 'Age', 'Fare']]
print(yeni_df.head())

"""---
# ⚙️ ORTA SEVİYE SORULAR
---

### Soru 1: Cinsiyete göre yaş ortalamasını bulun.
"""

# Kodunuzu buraya yazın
cinsiyet_yas = df.groupby('Sex')['Age'].mean()
print(cinsiyet_yas)



# GÖRSELLEŞTİRME
plt.figure(figsize=(8, 5))
cinsiyet_yas.plot(kind='bar', color=['pink', 'lightblue'])
plt.title('Cinsiyete Göre Ortalama Yaş')
plt.ylabel('Ortalama Yaş')
plt.xlabel('Cinsiyet')
plt.xticks(rotation=0)
plt.show()

"""### Soru 2: Sınıfa göre hayatta kalan kişi sayısını bulun."""

# Kodunuzu buraya yazın
sinif_hayatta = df.groupby('Pclass')['Survived'].sum()
print(sinif_hayatta)

# YORUM
print("\n YORUM:")
print("- 1. sınıf yolcularının hayatta kalma sayısı en yüksek")
print("- 3. sınıfta daha çok yolcu olmasına rağmen hayatta kalan sayısı az")
print("- Sosyal sınıfın hayatta kalmada büyük etkisi var")

# GÖRSELLEŞTİRME
plt.figure(figsize=(10, 4))
plt.subplot(1, 2, 1)
sinif_hayatta.plot(kind='bar', color=['gold', 'silver', 'brown'])
plt.title('Sınıfa Göre Hayatta Kalan Sayısı')
plt.ylabel('Hayatta Kalan Sayısı')
plt.xlabel('Yolcu Sınıfı')
plt.xticks(rotation=0)

plt.subplot(1, 2, 2)
sinif_orani = df.groupby('Pclass')['Survived'].mean()
sinif_orani.plot(kind='bar', color=['gold', 'silver', 'brown'])
plt.title('Sınıfa Göre Hayatta Kalma Oranı')
plt.ylabel('Hayatta Kalma Oranı')
plt.xlabel('Yolcu Sınıfı')
plt.xticks(rotation=0)
plt.tight_layout()
plt.show()

"""### Soru 3: Hem cinsiyet hem sınıfa göre hayatta kalma oranlarını hesaplayın."""

# Kodunuzu buraya yazın
print("\n CİNSİYET VE SINIFA GÖRE HAYATTA KALMA ORANLARI")
cinsiyet_sinif = df.groupby(['Sex', 'Pclass'])['Survived'].mean()
print(cinsiyet_sinif)

# YORUM
print("\nYORUM:")
print("- Kadınlar her sınıfta erkeklerden daha yüksek hayatta kalma oranına sahip")
print("- 'Kadınlar ve çocuklar önce' kuralının uygulandığı görülüyor")
print("- 1. sınıf kadınlarda hayatta kalma oranı %96, 3. sınıf erkeklerde %13")

# GÖRSELLEŞTİRME
plt.figure(figsize=(10, 6))
cinsiyet_sinif_pivot = df.pivot_table(values='Survived', index='Pclass', columns='Sex', aggfunc='mean')
sns.heatmap(cinsiyet_sinif_pivot, annot=True, fmt='.2f', cmap='RdYlGn')
plt.title('Cinsiyet ve Sınıfa Göre Hayatta Kalma Oranları')
plt.ylabel('Yolcu Sınıfı')
plt.xlabel('Cinsiyet')
plt.show()

"""### Soru 4: Embarked değişkenine göre ortalama yaş ve ortalama ücret nedir?"""

# Kodunuzu buraya yazın
print(df.groupby('Embarked')[['Age', 'Fare']].mean())

"""### Soru 5: Pclass gruplarına göre yaşın standart sapmasını bulun."""

# Kodunuzu buraya yazın
print(df.groupby('Pclass')['Age'].std())

"""### Soru 6: Her `Embarked` limanından kaç yolcu olduğunu ve bunların yüzdelik dağılımını yazdırın."""

# Kodunuzu buraya yazın
print(df['Embarked'].value_counts())
print(df['Embarked'].value_counts(normalize=True) * 100)

"""### Soru 7: Yaşı 60'tan büyük olanların hayatta kalma oranını bulun."""

# Kodunuzu buraya yazın
print(df[df['Age'] > 60]['Survived'].mean())

"""### Soru 8: `Sex`, `Pclass`, `Survived` için `groupby()` + `agg()` ile ortalama yaş ve ücret hesaplayın."""

# Kodunuzu buraya yazın
print(df.groupby(['Sex', 'Pclass', 'Survived']).agg({'Age': 'mean', 'Fare': 'mean'}))

"""### Soru 9: Age değişkenini artan düzende sıralayın ve ilk 10 kişiyi yazdırın."""

# Kodunuzu buraya yazın
# Yaşa göre sırala ve ilk 10'u al
en_genc_10 = df.sort_values('Age', ascending=True).head(10)
print(en_genc_10[['Name', 'Age', 'Sex', 'Pclass']])

"""---
# 🧠 KİRLENMEK GÜZELDİR SORULARI :)
---

### Soru 1: En pahalı bileti alan kişinin yaşı, cinsiyeti ve sınıfı nedir?
"""

# Kodunuzu buraya yazın
# En pahalı bileti alan kişinin bilgileri
en_pahali = df[df['Fare'] == df['Fare'].max()]
print(en_pahali[['Name', 'Age', 'Sex', 'Pclass', 'Fare']])

# YORUM
print("\nYORUM:")
print("- En pahalı bilet 512.33 sterlin")
print("- 1. sınıf yolcusu, muhtemelen lüks süit")

"""### Soru 2: Hayatta kalanlar ile ölenler arasında yaş ortalamaları farkı nedir?"""

# Kodunuzu buraya yazın
# Hayatta kalanlar ile ölenler arasında yaş ortalamaları farkı
hayatta_kalanlar = df[df['Survived'] == 1]['Age'].mean()
olenler = df[df['Survived'] == 0]['Age'].mean()

"""### Soru 3: Hangi `Pclass` grubunda kadınların hayatta kalma oranı en yüksektir?"""

# Kodunuzu buraya yazın
# Kadınların sınıflara göre hayatta kalma oranı
kadinlar = df[df['Sex'] == 'female']
oranlar = kadinlar.groupby('Pclass')['Survived'].mean()
print(oranlar)
print(f"En yüksek oran: {oranlar.idxmax()}. sınıf (%{oranlar.max()*100:.1f})")

"""### Soru 4: Ortalama yaşın altında olan ve hayatta kalan erkeklerin sayısı kaçtır?"""

# Kodunuzu buraya yazın
# Ortalama yaşın altında olan erkeklerin sayısı
ortalama_yas = df['Age'].mean()
erkekler = df[(df['Sex'] == 'male') & (df['Age'] < ortalama_yas)]
print(len(erkekler[erkekler['Survived'] == 1]))

"""### Soru 5: `Cabin` değeri eksik olmayanların yaş ortalaması ile eksik olanların yaş ortalaması arasında fark var mı?"""

# Kodunuzu buraya yazın
# Cabin değeri eksik olmayanların yaş ortalaması
cabin_dolu = df[~df['Cabin'].isnull()]['Age'].mean()

# Cabin değeri eksik olanların yaş ortalaması
cabin_bos = df[df['Cabin'].isnull()]['Age'].mean()

print(f"Cabin dolu yaş ortalaması: {cabin_dolu:.2f}")
print(f"Cabin boş yaş ortalaması: {cabin_bos:.2f}")
print(f"Fark: {cabin_dolu - cabin_bos:.2f}")

"""### Soru 6: `.describe()` çıktısına göre çarpıklık var mı? Hangi değişkenlerde?"""

# Kodunuzu buraya yazın
# Her sayısal değişken için çarpıklık kontrolü
numerical_cols = ['Age', 'SibSp', 'Parch', 'Fare']

for col in numerical_cols:
    data = df[col].dropna()  # NaN değerleri çıkar
    mean_val = data.mean()
    median_val = data.median()

    print(f"\n{col.upper()}:")
    print(f"  Ortalama: {mean_val:.2f}")
    print(f"  Medyan: {median_val:.2f}")

    # Çarpıklık testi
    if abs(mean_val - median_val) > 0.5:
        if mean_val > median_val:
            print(f"  → SAĞ ÇARPIK (Pozitif çarpıklık)")
        else:
            print(f"  → SOL ÇARPIK (Negatif çarpıklık)")
    else:
        print(f"  → NORMAL DAĞILIM (Çarpıklık yok)")

# Skewness değerlerini hesapla
print("\n=== SKEWNESS DEĞERLERİ ===")
for col in numerical_cols:
    skew_val = df[col].skew()
    print(f"{col}: {skew_val:.3f}")
    if abs(skew_val) > 1:
        print(f"  → Yüksek çarpıklık")
    elif abs(skew_val) > 0.5:
        print(f"  → Orta çarpıklık")
    else:
        print(f"  → Düşük çarpıklık")

"""### Soru 7: Veri setindeki en fazla tekrarlanan yaş değeri (mod) nedir?"""

# Kodunuzu buraya yazın
# En fazla tekrarlanan yaş değeri (mod)
en_cok_tekrarlanan_yas = df['Age'].mode()[0]
print(f"En fazla tekrarlanan yaş değeri: {en_cok_tekrarlanan_yas}")

"""### Soru 8: Ortalama bilet fiyatı kadınlar mı yoksa erkekler için mi daha yüksek?"""

# Kodunuzu buraya yazın
cinsiyet_fare = df.groupby('Sex')['Fare'].mean()
print(cinsiyet_fare)

# YORUM
print("\n YORUM:")
fark = cinsiyet_fare['female'] - cinsiyet_fare['male']
print(f"- Kadınlar erkeklerden ortalama ${fark:.2f} daha fazla ödemiş")
print("- Muhtemelen kadınlar daha yüksek sınıflarda seyahat etmiş")

# GÖRSELLEŞTİRME
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
cinsiyet_fare.plot(kind='bar', color=['pink', 'lightblue'])
plt.title('Cinsiyete Göre Ortalama Bilet Fiyatı')
plt.ylabel('Ortalama Bilet Fiyatı ($)')
plt.xlabel('Cinsiyet')
plt.xticks(rotation=0)

plt.subplot(1, 2, 2)
df.boxplot(column='Fare', by='Sex')
plt.title('Cinsiyete Göre Bilet Fiyatı Dağılımı')
plt.ylabel('Bilet Fiyatı ($)')
plt.suptitle('')
plt.tight_layout()
plt.show()

# GENEL HAYATTA KALMA ANALİZİ

hayatta_kalma_orani = df['Survived'].mean()
print(f"Genel hayatta kalma oranı: %{hayatta_kalma_orani*100:.1f}")

# GÖRSELLEŞTİRME
plt.figure(figsize=(12, 8))

plt.subplot(2, 2, 1)
df['Survived'].value_counts().plot(kind='pie', autopct='%1.1f%%', labels=['Öldü', 'Yaşadı'])
plt.title('Hayatta Kalma Oranı')

plt.subplot(2, 2, 2)
df.groupby('Sex')['Survived'].mean().plot(kind='bar', color=['pink', 'lightblue'])
plt.title('Cinsiyete Göre Hayatta Kalma')
plt.ylabel('Hayatta Kalma Oranı')
plt.xticks(rotation=0)

plt.subplot(2, 2, 3)
df.groupby('Pclass')['Survived'].mean().plot(kind='bar', color=['gold', 'silver', 'brown'])
plt.title('Sınıfa Göre Hayatta Kalma')
plt.ylabel('Hayatta Kalma Oranı')
plt.xticks(rotation=0)

plt.subplot(2, 2, 4)
df.groupby('Embarked')['Survived'].mean().plot(kind='bar', color=['red', 'green', 'blue'])
plt.title('Limana Göre Hayatta Kalma')
plt.ylabel('Hayatta Kalma Oranı')
plt.xticks(rotation=0)

plt.tight_layout()
plt.show()

print("- Titanic faciasında sosyal sınıf ve cinsiyet hayatta kalmada kritik faktörler")
print("- 'Kadınlar ve çocuklar önce' kuralı büyük ölçüde uygulanmış")
print("- Üst sınıf yolcularının hayatta kalma şansı çok daha yüksek")


# -*- coding: utf-8 -*-
"""4_feature_engineering_homework_ipynb_adlı_not_defterinin_kopyası.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AXBcLG-9nHFWm-Uu7EjvZHHJFOFT9i05

# Titanic Veri Seti ile Özellik Mühendisliği Ödevi


- **Veri seti**: Titanic veri seti.
- **Amaç**:
  - `Sex` sütununu veri setinden düşürmek.
  - `Name` sütunundan unvanları (`Title`, örneğin Mr, Mrs, Miss) çıkararak cinsiyet tahmini yapmak.
  - Eksik verileri doldurmak ve yeni özellikler oluşturmak.
  - Bu aşamaya kadar kullanılan kodların fonksiyonlaştırılması.
  - Tüm işlemleri fonksiyonlar halinde düzenlemek.
- **Kullanılan kütüphaneler**: `pandas`, `numpy`.


## Görevler
Aşağıdaki adımları takip ederek özellik mühendisliği yapın. Her bir görev için ayrı bir fonksiyon yazmanız gerekiyor. Fonksiyonlar, modüler ve tekrar kullanılabilir olmalıdır.

### 1. Veri Setini Yükleme
- **Görev**: Titanic veri setini bir pandas DataFrame’e yükleyin.
- **Fonksiyon**: `load_data(file_path)`
  - **Parametre**: `file_path` (dosya yolu, örneğin "train.csv")
  - **Çıktı**: Pandas DataFrame

### 2. Eksik Verileri Doldurma
- **Görev**: `Age` ve `Embarked` sütunlarındaki eksik verileri doldurun.
  - `Age`: Ortalama yaş ile doldurun.
  - `Embarked`: En sık kullanılan liman ile doldurun.
- **Fonksiyon**: `fill_missing_values(df)`
  - **Parametre**: DataFrame
  - **Çıktı**: Eksik verileri doldurulmuş DataFrame
  - **Not**: Orijinal DataFrame’i değiştirmemek için kopyasını döndürün.

### 3. Sex Sütununu Düşürme
- **Görev**: `Sex` sütununu veri setinden kaldırın.
- **Fonksiyon**: `drop_sex_column(df)`
  - **Parametre**: DataFrame
  - **Çıktı**: `Sex` sütunu kaldırılmış DataFrame
  - **Not**: Orijinal DataFrame’i değiştirmemek için kopyasını döndürün.

### 4. Unvan Çıkarımı (Title Extraction)
- **Görev**: `Name` sütunundan unvanları (`Mr`, `Mrs`, `Miss`, `Master` vb.) çıkarın ve yeni bir `Title` sütunu oluşturun.
- **Fonksiyon**: `extract_title(df)`
  - **Parametre**: DataFrame
  - **Çıktı**: `Title` sütunu eklenmiş DataFrame
  - **Not**: Unvanları düzenli ifadeler (regex) kullanarak çıkarın. Örneğin, "Mr." veya "Mrs." gibi ifadeleri arayın.

### 5. Cinsiyet Tahmini
- **Görev**: `Title` sütununa dayalı olarak cinsiyet tahmini yapın ve yeni bir `EstimatedSex` sütunu oluşturun.
  - Örneğin: `Mr`, `Master` → `male`; `Mrs`, `Miss` → `female`; diğer unvanlar için en yaygın cinsiyeti kullanın.
- **Fonksiyon**: `estimate_sex_from_title(df)`
  - **Parametre**: DataFrame
  - **Çıktı**: `EstimatedSex` sütunu eklenmiş DataFrame
  - **Not**: Orijinal DataFrame’i değiştirmemek için kopyasını döndürün.

### 6. Yeni Özellik Oluşturma
- **Görev**: Aşağıdaki yeni özellikleri oluşturun:
  - `FamilySize`: `SibSp` + `Parch` + 1 (kendi dahil)
  - `IsAlone`: `FamilySize` 1 ise 1, değilse 0
  - `AgeGroup`: Yaşı kategorilere ayırın (örneğin, 0-12: Çocuk, 13-19: Genç, 20-59: Yetişkin, 60+: Yaşlı)
- **Fonksiyon**: `create_new_features(df)`
  - **Parametre**: DataFrame
  - **Çıktı**: Yeni özellikler eklenmiş DataFrame
  - **Not**: Orijinal DataFrame’i değiştirmemek için kopyasını döndürün.

### 7. Tüm İşlemleri Birleştirme
- **Görev**: Yukarıdaki tüm işlemleri sırayla uygulayan bir ana fonksiyon yazın.
- **Fonksiyon**: `process_titanic_data(file_path)`
  - **Parametre**: `file_path`
  - **Çıktı**: İşlenmiş DataFrame
  - **Not**: Tüm fonksiyonları sırayla çağırarak veri setini tamamen işleyin.
"""

import pandas as pd
import numpy as np
import re


#  Veri Setini Yükleme
def load_data(file_path):
    df = pd.read_csv(file_path)
    return df

#  Eksik Verileri Doldurma
def fill_missing_values(df):
    df_copy = df.copy()
    df_copy['Age'] = df_copy['Age'].fillna(df_copy['Age'].mean())
    df_copy['Embarked'] = df_copy['Embarked'].fillna(df_copy['Embarked'].mode()[0])
    return df_copy

#  Sex Sütununu Düşürme
def drop_sex_column(df):
    df_copy = df.copy()
    df_copy.drop('Sex', axis=1, inplace=True)
    return df_copy

#  Unvan Çıkarımı (Title Extraction)
def extract_title(df):
    df_copy = df.copy()
    df_copy['Title'] = df_copy['Name'].apply(lambda x: re.search('([A-Za-z]+)\.', x).group(0) if re.search('([A-Za-z]+)\.', x) else '')
    df_copy['Title'] = df_copy['Title'].str.replace('.', '', regex=False).str.strip()
    return df_copy

#  Cinsiyet Tahmini
def estimate_sex_from_title(df):
    df_copy = df.copy()
    df_copy['EstimatedSex'] = df_copy['Title'].apply(lambda x: 'male' if x in ['Mr', 'Master', 'Dr', 'Rev', 'Col', 'Major', 'Don', 'Capt', 'Sir', 'Jonkheer'] else
                                                              'female' if x in ['Mrs', 'Miss', 'Mlle', 'Mme', 'Ms', 'Lady', 'Countess', 'Dona'] else
                                                              'unknown')
    # Kalan 'unknown'ları en yaygın cinsiyet olan 'male' e dönüştürme
    df_copy['EstimatedSex'] = df_copy['EstimatedSex'].replace('unknown', 'male')
    return df_copy

#  Yeni Özellik Oluşturma
def create_new_features(df):
    df_copy = df.copy()
    df_copy['FamilySize'] = df_copy['SibSp'] + df_copy['Parch'] + 1
    df_copy['IsAlone'] = df_copy['FamilySize'].apply(lambda x: 1 if x == 1 else 0)

    bins = [0, 12, 19, 59, np.inf]
    labels = ['Child', 'Teenager', 'Adult', 'Senior']
    df_copy['AgeGroup'] = pd.cut(df_copy['Age'], bins=bins, labels=labels, right=True, include_lowest=True)
    return df_copy

#  Tüm İşlemleri Birleştirme
def process_titanic_data(file_path):
    df = load_data(file_path)
    df = fill_missing_values(df)
    df = drop_sex_column(df)
    df = extract_title(df)
    df = estimate_sex_from_title(df)
    df = create_new_features(df)
    return df



if __name__ == "__main__":
    titanic_file_path = "https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"
    processed_df = process_titanic_data(titanic_file_path)

    if processed_df is not None:
        print("\nİşlenmiş Veri Setinin İlk 5 Satırı:")
        print(processed_df.head())
        print("\n'EstimatedSex' dağılımı:")
        print(processed_df['EstimatedSex'].value_counts())

"""- Pipeline süreçleri oluşturun ve ColumnsTransformer kullanın.

- Kendi Fonksiyonlarınızı Pipeline ile kulanmaya çalışın.
- Fonksiyonlarınızı yazarken, her zaman DataFrame’in bir kopyasını döndürerek orijinal veriyi korumaya özen gösterin.
- `EstimatedSex` için unvanların cinsiyetle ilişkisini belirlerken, yaygın unvanlar (`Mr`, `Mrs`, `Miss`, `Master`) için sabit kurallar kullanabilirsiniz. Nadir unvanlar için varsayılan bir cinsiyet atayabilirsiniz (örneğin, `male`).


Başarılar!
"""